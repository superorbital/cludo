// Code generated by go-swagger; DO NOT EDIT.

package environment

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/superorbital/cludo/models"
)

// GenerateEnvironmentReader is a Reader for the GenerateEnvironment structure.
type GenerateEnvironmentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GenerateEnvironmentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGenerateEnvironmentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewGenerateEnvironmentBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGenerateEnvironmentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGenerateEnvironmentOK creates a GenerateEnvironmentOK with default headers values
func NewGenerateEnvironmentOK() *GenerateEnvironmentOK {
	return &GenerateEnvironmentOK{}
}

/* GenerateEnvironmentOK describes a response with status code 200, with default header values.

OK
*/
type GenerateEnvironmentOK struct {
	Payload *models.ModelsEnvironmentResponse
}

func (o *GenerateEnvironmentOK) Error() string {
	return fmt.Sprintf("[POST /environment][%d] generateEnvironmentOK  %+v", 200, o.Payload)
}
func (o *GenerateEnvironmentOK) GetPayload() *models.ModelsEnvironmentResponse {
	return o.Payload
}

func (o *GenerateEnvironmentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ModelsEnvironmentResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateEnvironmentBadRequest creates a GenerateEnvironmentBadRequest with default headers values
func NewGenerateEnvironmentBadRequest() *GenerateEnvironmentBadRequest {
	return &GenerateEnvironmentBadRequest{}
}

/* GenerateEnvironmentBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type GenerateEnvironmentBadRequest struct {
	Payload string
}

func (o *GenerateEnvironmentBadRequest) Error() string {
	return fmt.Sprintf("[POST /environment][%d] generateEnvironmentBadRequest  %+v", 400, o.Payload)
}
func (o *GenerateEnvironmentBadRequest) GetPayload() string {
	return o.Payload
}

func (o *GenerateEnvironmentBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGenerateEnvironmentDefault creates a GenerateEnvironmentDefault with default headers values
func NewGenerateEnvironmentDefault(code int) *GenerateEnvironmentDefault {
	return &GenerateEnvironmentDefault{
		_statusCode: code,
	}
}

/* GenerateEnvironmentDefault describes a response with status code -1, with default header values.

generic error response
*/
type GenerateEnvironmentDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the generate environment default response
func (o *GenerateEnvironmentDefault) Code() int {
	return o._statusCode
}

func (o *GenerateEnvironmentDefault) Error() string {
	return fmt.Sprintf("[POST /environment][%d] generate-environment default  %+v", o._statusCode, o.Payload)
}
func (o *GenerateEnvironmentDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GenerateEnvironmentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
