{{/*util functions to retrieve flags*/}}

{{ define "primitiveretriever" }}
    {{- $flagValueVar := printf "%vFlagValue" (camelize .Name) }}
    {{- $flagNameVar := printf "%vFlagName" (camelize .Name )}}
    {{- if or (eq .GoType "int64") (eq .GoType "int32") (eq .GoType "string") (eq .GoType "float64") (eq .GoType "float32") (eq .GoType "bool") }}
        {{ template "flagnamevar" . }}
        {{ $flagValueVar }}, err := cmd.Flags().Get{{pascalize .GoType}}({{ $flagNameVar }})
        if err != nil{
            return err, false
        }
        {{- /* reciever by convention is m for CLI */}}
        m.{{ pascalize .Name }} = {{- if .IsNullable }}&{{- end }}{{ $flagValueVar }}
    {{- else if eq .GoType "strfmt.DateTime" }} {{/*Get flag value as string, then parse it*/}}
        {{ template "flagnamevar" . }}
        {{ $flagValueVar }}Str, err := cmd.Flags().GetString({{ $flagNameVar }})
        if err != nil{
            return err, false
        }
        {{ $flagValueVar }} := strfmt.NewDateTime()
		if err := {{ $flagValueVar }}.UnmarshalText([]byte({{ $flagValueVar }}Str)); err != nil{
            return err, false
        }
        m.{{ pascalize .Name }} = {{- if .IsNullable }}&{{- end }}{{ $flagValueVar }}
    {{- else if eq .GoType "strfmt.UUID" }} {{/*Many of the strfmt string alias types can be added here*/}}
        {{ template "flagnamevar" . }}
        {{ $flagValueVar }}Str, err := cmd.Flags().GetString({{ $flagNameVar }})
        if err != nil{
            return err, false
        }
        {{ $flagValueVar }} := {{ .GoType }}("")
        if err := {{ $flagValueVar }}.UnmarshalText([]byte({{ $flagValueVar }}Str)); err != nil{
            return err, false
        }
        m.{{ pascalize .Name }} = {{- if .IsNullable }}&{{- end }}{{ $flagValueVar }}
    {{- else }}
        // warning: primitive {{.Name}} {{.GoType }} is not supported by go-swagger cli yet
    {{- end }}
{{ end }}