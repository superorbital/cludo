// Code generated by go-swagger; DO NOT EDIT.

package cli

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/spf13/cobra"
	"github.com/superorbital/cludo/models"
)

// register flags to command
func registerErrorFlags(cmdPrefix string, cmd *cobra.Command) error {

	if err := registerErrorCode(cmdPrefix, cmd); err != nil {
		return err
	}

	if err := registerErrorMessage(cmdPrefix, cmd); err != nil {
		return err
	}

	return nil
}

func registerErrorCode(cmdPrefix string, cmd *cobra.Command) error {

	codeDescription := ``

	var codeFlagName string
	if cmdPrefix == "" {
		codeFlagName = "code"
	} else {
		codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
	}

	var codeFlagDefault int64

	_ = cmd.PersistentFlags().Int64(codeFlagName, codeFlagDefault, codeDescription)

	return nil
}

func registerErrorMessage(cmdPrefix string, cmd *cobra.Command) error {

	messageDescription := `Required. `

	var messageFlagName string
	if cmdPrefix == "" {
		messageFlagName = "message"
	} else {
		messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
	}

	var messageFlagDefault string

	_ = cmd.PersistentFlags().String(messageFlagName, messageFlagDefault, messageDescription)

	if err := cmd.MarkPersistentFlagRequired(messageFlagName); err != nil {
		return err
	}

	return nil
}

// retrieve flags from commands, and set value in model. Return true if any flag is passed by user to fill model field.
func retrieveErrorFlags(m *models.Error, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false

	err, codeAdded := retrieveErrorCodeFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || codeAdded

	err, messageAdded := retrieveErrorMessageFlags(m, cmdPrefix, cmd)
	if err != nil {
		return err, false
	}
	retAdded = retAdded || messageAdded

	return nil, retAdded
}

func retrieveErrorCodeFlags(m *models.Error, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	codeFlagName := fmt.Sprintf("%v.code", cmdPrefix)
	if cmd.Flags().Changed(codeFlagName) {

		var codeFlagName string
		if cmdPrefix == "" {
			codeFlagName = "code"
		} else {
			codeFlagName = fmt.Sprintf("%v.code", cmdPrefix)
		}

		codeFlagValue, err := cmd.Flags().GetInt64(codeFlagName)
		if err != nil {
			return err, false
		}
		m.Code = codeFlagValue

		retAdded = true
	}
	return nil, retAdded
}

func retrieveErrorMessageFlags(m *models.Error, cmdPrefix string, cmd *cobra.Command) (error, bool) {
	retAdded := false
	messageFlagName := fmt.Sprintf("%v.message", cmdPrefix)
	if cmd.Flags().Changed(messageFlagName) {

		var messageFlagName string
		if cmdPrefix == "" {
			messageFlagName = "message"
		} else {
			messageFlagName = fmt.Sprintf("%v.message", cmdPrefix)
		}

		messageFlagValue, err := cmd.Flags().GetString(messageFlagName)
		if err != nil {
			return err, false
		}
		m.Message = &messageFlagValue

		retAdded = true
	}
	return nil, retAdded
}
